<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.jobxhub.server.dao.UserDao">

    <resultMap id="UserBean" type="com.jobxhub.server.domain.UserBean" >
        <result column="user_id"        property="userId"      jdbcType="BIGINT"   javaType="long"/>
        <result column="user_name"      property="userName"    jdbcType="VARCHAR"  javaType="string"/>
        <result column="contact"        property="contact"     jdbcType="VARCHAR"  javaType="string"/>
        <result column="create_time"    property="createTime"  jdbcType="DATE"     javaType="java.sql.Date"/>
        <result column="email"          property="email"       jdbcType="VARCHAR"  javaType="string"/>
        <result column="header_pic"     property="headerPic"   jdbcType="BLOB"     javaType="java.sql.Blob"  typeHandler="org.apache.ibatis.type.BlobTypeHandler"/>
        <result column="modify_time"    property="modifyTime"  jdbcType="DATE"     javaType="java.sql.Date"/>
        <result column="salt"           property="salt"        jdbcType="VARCHAR"  javaType="string"/>
        <result column="password"       property="password"    jdbcType="VARCHAR"  javaType="string"/>
        <result column="pic_ext_name"   property="picExtName"  jdbcType="VARCHAR"  javaType="string"/>
        <result column="qq"             property="qq"          jdbcType="VARCHAR"  javaType="string"/>
        <result column="real_name"      property="realName"    jdbcType="VARCHAR"  javaType="string"/>
        <result column="role_id"        property="roleId"      jdbcType="BIGINT"   javaType="long"/>
        <result column="role_name"      property="roleName"    jdbcType="VARCHAR"  javaType="string"/>
    </resultMap>

    <sql id="query_User">
        u.user_id,
        u.user_name,
        u.contact,
        u.create_time,
        u.email,
        u.header_pic,
        u.modify_time,
        u.password,
        u.salt,
        u.pic_ext_name,
        u.qq,
        u.real_name,
        u.role_id,
        r.role_name
    </sql>

    <select id="getById" parameterType="java.lang.Long" resultMap="UserBean">
        select
        <include refid="query_User"/>
        from  t_user as u
        left join t_role r
        on  u.role_id = r.role_id
        where u.user_id=#{userId}
    </select>

    <select id="getByName" parameterType="string" resultMap="UserBean">
        select
        <include refid="query_User"/>
        from  t_user as u
        left join t_role r
        on  u.role_id = r.role_id
        where u.user_name=#{userName}
    </select>

    <select id="getByPageBean" resultMap="UserBean">
        select
        <include refid="query_User"/>
        from  t_user as u
        left join t_role r
        on  u.role_id = r.role_id
        limit #{pager.offset}, #{pager.pageSize}
    </select>

    <select id="getCount" resultType="java.lang.Integer">
        select count(1) from  t_user
        <if test="filter.keys.size>0">
            where
            <foreach collection="filter.keys" item="key" separator=" and ">
                ${key} = #{filter[${key}]}
            </foreach>
        </if>
    </select>

    <update id="updatePassword">
       update t_user
       set password = #{password}
       where user_id = #{userId}
    </update>

    <insert id="save" parameterType="com.jobxhub.server.domain.UserBean" useGeneratedKeys="true" keyProperty="userId">
        insert into t_user (
            contact,
            create_time,
            email,
            modify_time,
            password,
            qq,
            real_name,
            role_id,
            salt,
            user_name
        ) values (
            #{contact},
            #{createTime},
            #{email},
            #{modifyTime},
            #{password},
            #{qq},
            #{realName},
            #{roleId},
            #{salt},
            #{userName}
        )
    </insert>

    <update id="update" parameterType="com.jobxhub.server.domain.UserBean">
        update t_user
        set
            contact = #{contact},
            create_time = #{createTime},
            email = #{email},
            modify_time = #{modifyTime},
            password = #{password},
            pic_ext_name = #{picExtName},
            qq = #{qq},
            real_name = #{realName},
            role_id = #{roleId},
            user_name = #{userName}
        where user_id = #{userId}
	</update>

    <update id="uploadImg">
        update t_user
        set header_pic = #{headerPic}
        where user_id = #{userId}
	</update>

</mapper>